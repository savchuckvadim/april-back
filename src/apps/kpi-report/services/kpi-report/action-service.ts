import { Injectable } from "@nestjs/common";
import { IFieldItem } from "src/modules/portal/interfaces/portal.interface";
import { Filter, FilterCode, FilterInnerCode } from "../../dto/kpi.dto";




@Injectable()
export class ActionService {
    getActionWithTypeData(actionType: IFieldItem, action: IFieldItem): Filter {
        const result: any = {};

        const atCode = actionType.code;
        const acCode = action.code;

        switch (acCode) {
            case 'plan':
            case 'done': {
                const { actionName } = this.getFeminineActionForm(acCode);
                if (['xo', 'call', 'call_in_progress', 'call_in_money'].includes(atCode)) {
                    result.innerCode = `call_${acCode}`;
                    result.name = `–ó–≤–æ–Ω–æ–∫`;

                } else if (['presentation', 'presentation_uniq', 'presentation_contact_uniq'].includes(atCode)) {
                    result.innerCode = `${atCode}_${acCode}` as FilterInnerCode;
                    const { actionTypeName } = this.getFeminineActionTypeForm(atCode);
                    result.name = ` ${actionTypeName}`;

                } else if (
                    ['ev_success', 'ev_fail'].includes(atCode) &&
                    acCode !== 'plan'
                ) {
                    result.innerCode = `${atCode}_${acCode}` as FilterInnerCode;
                    result.name = actionType.name;
                } else {
                    break;
                }
                if (actionName) {
                    result.name = `${actionName} ${result.name}`;
                }
                result.code = `${atCode}_${acCode}` as FilterCode;
                result.actionItem = action;
                result.actionTypeItem = actionType;
                break;
            }

            case 'act_send': {
                if (
                    [
                        'ev_offer',
                        'ev_offer_pres',
                        'ev_invoice',
                        'ev_invoice_pres',
                        'ev_contract'
                    ].includes(atCode)
                ) {
                    result.code = `${atCode}_${acCode}` as FilterCode;
                    result.innerCode = `${atCode}_${acCode}` as FilterInnerCode;

                    result.name = actionType.name;

                    if (atCode === 'ev_offer') {
                        result.name = '–ö–ü';
                    } else if (atCode === 'ev_offer_pres') {
                        result.name = '–ö–ü –ø–æ—Å–ª–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏';
                    }

                    result.actionItem = action;
                    result.actionTypeItem = actionType;
                }

                break;
            }

            default:
                break;
        }
        result.order = this.getActionOrder(result.innerCode);
        return result as Filter;
    }

    // üî§ –ê–Ω–∞–ª–æ–≥ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∂–µ–Ω—Å–∫–æ–≥–æ —Ä–æ–¥–∞
    private getFeminineActionForm(actionCode: string,): { actionName: string, } {
        // TODO: –∞–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ —Å–≤–æ—é –ª–æ–≥–∏–∫—É
        // –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ value = "–ø—Ä–æ–≤–µ–¥—ë–Ω", –≤–µ—Ä–Ω—É—Ç—å "–ø—Ä–æ–≤–µ–¥–µ–Ω–∞"
        // –¢—É—Ç –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∏–ª–∏ API
        let actionName = ''

        if (actionCode === 'plan') {
            actionName = '–ü–ª–∞–Ω'
        }

        return { actionName };
    }

    private getFeminineActionTypeForm(actionTypeCode: string): { actionTypeName: string } {
        // TODO: –∞–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ —Å–≤–æ—é –ª–æ–≥–∏–∫—É
        // –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ value = "–ø—Ä–æ–≤–µ–¥—ë–Ω", –≤–µ—Ä–Ω—É—Ç—å "–ø—Ä–æ–≤–µ–¥–µ–Ω–∞"
        // –¢—É—Ç –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∏–ª–∏ API

        let actionTypeName = ''

        if (actionTypeCode === 'presentation') {
            actionTypeName = '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è'
        } else if (actionTypeCode === 'presentation_uniq') {
            actionTypeName = '–ü—Ä–µ–∑. —É–Ω–∏–∫–∞–ª—å–Ω–∞—è'
        } else if (actionTypeCode === 'presentation_contact_uniq') {
            actionTypeName = '–ü—Ä–µ–∑. –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç—É'
        }

        return { actionTypeName };
    }

    private getActionOrder(actionCode: FilterInnerCode): number {
        switch (actionCode) {
            case 'call_plan':
                return 1;
            case 'call_done':
                return 2;
            case 'presentation_plan':
                return 3;
            case 'presentation_done':
                return 4;
            case 'presentation_uniq_plan':
                return 5;
            case 'presentation_uniq_done':
                return 6;
            case 'presentation_contact_uniq_plan':
                return 7;
            case 'presentation_contact_uniq_done':
                return 8;
            case 'ev_offer_act_send':
                return 9;
            case 'ev_offer_pres_act_send':
                return 10;
            case 'ev_invoice_act_send':
                return 11;
            case 'ev_invoice_pres_act_send':
                return 12;
            case 'ev_contract_act_send':
                return 13;
            case 'ev_success_done':
                return 14;
            case 'ev_fail_done':
                return 15;
            default:
                return 0;
        }
    }
}
